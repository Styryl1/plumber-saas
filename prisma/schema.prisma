// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// === USER MANAGEMENT ===
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Clerk integration
  clerkId String @unique

  // Dutch plumber profile
  companyName    String?
  phone          String?
  address        String?
  city           String?
  postalCode     String?
  kvkNumber      String? // Dutch Chamber of Commerce number
  btgNumber      String? // Dutch VAT number
  
  // Relationships
  jobs           Job[]
  customers      Customer[]
  invoices       Invoice[]
  chatSessions   ChatSession[]
  
  @@map("users")
}

// === CUSTOMER MANAGEMENT ===
model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  city      String?
  postalCode String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs   Job[]
  
  @@map("customers")
}

// === JOB MANAGEMENT ===
model Job {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      JobStatus @default(SCHEDULED)
  priority    Priority  @default(NORMAL)
  
  // Scheduling
  scheduledAt DateTime?
  completedAt DateTime?
  estimatedDuration Int? // minutes
  
  // Location
  address    String?
  city       String?
  postalCode String?
  
  // Emergency classification (Dutch market specific)
  emergencyLevel Int @default(0) // 0=Normal, 1=Minor, 2=Urgent, 3=Emergency, 4=Critical
  
  // Pricing
  estimatedPrice Decimal?
  finalPrice     Decimal?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  invoices   Invoice[]
  
  @@map("jobs")
}

enum JobStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// === INVOICING & BILLING ===
model Invoice {
  id          String        @id @default(cuid())
  invoiceNumber String      @unique
  status      InvoiceStatus @default(DRAFT)
  
  // Dutch tax compliance
  subtotal    Decimal
  btgAmount   Decimal // 21% or 9% Dutch VAT
  btgRate     Decimal // 0.21 or 0.09
  total       Decimal
  
  // Payment
  dueDate     DateTime
  paidAt      DateTime?
  paymentMethod String? // "ideal", "banktransfer", "cash"
  molliePaymentId String? // Mollie payment reference
  
  // PDF generation
  pdfUrl      String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId  String
  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

// === AI CHAT SYSTEM ===
model ChatSession {
  id        String   @id @default(cuid())
  sessionId String   @unique // Browser fingerprint + timestamp
  
  // Customer context
  customerPhone String?
  customerEmail String?
  customerName  String?
  location      String? // Dutch postal code or address
  
  // Emergency detection
  emergencyLevel Int @default(0)
  urgencyScore   Float @default(0.0)
  
  // Session metadata
  userAgent     String?
  ipAddress     String?
  widgetSource  String? // Which website embedded the widget
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId   String?
  user     User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  messages ChatMessage[]
  
  @@map("chat_sessions")
}

model ChatMessage {
  id        String      @id @default(cuid())
  role      MessageRole
  content   String
  
  // AI metadata
  aiModel   String? // "gpt-5", "claude-opus-4.1"
  reasoning String? // AI's reasoning process
  confidence Float? // AI confidence score
  
  // Dutch language processing
  detectedLanguage String @default("nl")
  plumbingTermsDetected String[] // Detected Dutch plumbing terminology
  
  createdAt DateTime @default(now())

  // Relationships
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// === WIDGET ANALYTICS ===
model WidgetAnalytics {
  id        String   @id @default(cuid())
  
  // Widget performance
  domain       String
  pageUrl      String
  sessionCount Int @default(1)
  
  // Conversion tracking
  chatStarted     Boolean @default(false)
  bookingStarted  Boolean @default(false)
  bookingCompleted Boolean @default(false)
  phoneRevealed   Boolean @default(false)
  
  // Dutch market metrics
  cityDetected    String?
  postalCodeDetected String?
  emergencyDetected Boolean @default(false)
  
  date      DateTime @default(now())
  
  @@map("widget_analytics")
}

// === AUTOMATION LOGS ===
model AutomationLog {
  id        String   @id @default(cuid())
  type      String   // "dependency_update", "security_scan", "backup"
  status    String   // "success", "failed", "in_progress"
  message   String?
  metadata  Json?    // Additional data
  
  createdAt DateTime @default(now())
  
  @@map("automation_logs")
}