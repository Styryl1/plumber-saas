# Specialist Agent Configuration for Plumber SaaS
version: "2.0.0"
auto_activation: true

specialists:
  ui-specialist-agent:
    role: "UI Expert - Schedule-X v2+, shadcn/ui, Tailwind CSS 4.0+"
    keywords: ["ui", "component", "tailwind", "schedule-x", "mobile", "calendar", "design", "responsive"]
    patterns_file: "UI_PATTERNS.md"
    tools:
      - "Context7 MCP"
      - "Firecrawl MCP"
      - "Playwright MCP"
    responsibilities:
      - "Schedule-X calendar integration with Dutch localization"
      - "shadcn/ui component composition and variants"
      - "Mobile-first responsive design (320px - 4K)"
      - "Performance optimization (bundle size, Core Web Vitals)"
      - "WCAG 2.1 AA accessibility compliance"
    success_metrics:
      - "Pattern freshness: <14 days from library releases"
      - "Mobile performance: >90 Lighthouse score"
      - "Accessibility: 100% WCAG 2.1 AA compliance"
    outputs:
      - "/dashboard/UI_COMPONENTS.md"
      - "/widget/UI_STYLES.md"
      - "/marketplace/UI_LIBRARY.md"

  ux-design-agent:
    role: "UX Psychology Expert - Conversion optimization, user journey mapping"
    keywords: ["conversion", "psychology", "journey", "booking", "personality", "ux", "funnel"]
    patterns_file: "UX_PSYCHOLOGY_PATTERNS.md"
    tools:
      - "Context7 MCP"
      - "Firecrawl MCP"
      - "Playwright MCP"
    responsibilities:
      - "Conversion funnel optimization for plumber bookings"
      - "Dutch customer psychology and behavior patterns"
      - "AI personality design for trust building"
      - "Emergency vs non-emergency user journey mapping"
      - "Mobile booking flow optimization"
    dutch_focus:
      - "Amsterdam customer behavior patterns"
      - "Dutch communication preferences (direct, professional)"
      - "Emergency response cultural expectations"
    success_metrics:
      - "Booking conversion rate improvement"
      - "Customer satisfaction scores"
      - "Emergency response accuracy"

  t3-specialist-agent:
    role: "T3 Stack Expert - Next.js 14, tRPC, TypeScript, Prisma"
    keywords: ["next", "trpc", "typescript", "react", "prisma", "t3", "router", "mutation"]
    patterns_file: "T3_BEST_PRACTICES.md"
    tools:
      - "Context7 MCP"
      - "Playwright MCP"
    responsibilities:
      - "Next.js 14 App Router patterns"
      - "tRPC end-to-end type safety"
      - "Prisma schema design and optimization"
      - "TypeScript strict mode compliance"
      - "Server-side rendering optimization"
    focus_areas:
      - "Multi-tenant architecture with RLS"
      - "Real-time subscriptions via Supabase"
      - "Performance optimization for 1000+ jobs"
    success_metrics:
      - "Zero TypeScript errors"
      - "100% tRPC API coverage"
      - "Sub-100ms API response times"

  database-specialist-agent:
    role: "Database Expert - Supabase, PostgreSQL, RLS, real-time"
    keywords: ["supabase", "prisma", "rls", "migration", "postgresql", "database", "query"]
    patterns_file: "DATABASE_PATTERNS.md"
    tools:
      - "Supabase MCP"
      - "Context7 MCP"
      - "Playwright MCP"
    responsibilities:
      - "Row Level Security (RLS) policy design"
      - "Multi-tenant data isolation patterns"
      - "Real-time subscription optimization"
      - "Query performance optimization"
      - "Data backup and recovery strategies"
    dutch_considerations:
      - "GDPR compliance for customer data"
      - "BTW calculation data storage"
      - "Dutch postal code integration"
    success_metrics:
      - "Zero data leakage between tenants"
      - "Query performance <50ms average"
      - "100% GDPR compliance"

  auth-specialist-agent:
    role: "Authentication Expert - Clerk, multi-tenant, organizations"
    keywords: ["clerk", "auth", "organization", "permission", "user", "login", "middleware"]
    patterns_file: "AUTH_PATTERNS.md"
    tools:
      - "Clerk MCP"
      - "Context7 MCP"
      - "Playwright MCP"
    responsibilities:
      - "Multi-tenant organization setup"
      - "Permission and role management"
      - "Middleware and route protection"
      - "User onboarding flows"
      - "Session management and security"
    plumber_specific:
      - "Plumber vs customer user types"
      - "Emergency access patterns"
      - "Mobile authentication UX"
    success_metrics:
      - "Zero authentication bypasses"
      - "Sub-200ms auth check times"
      - "100% route protection coverage"

  payment-specialist-agent:
    role: "Payment Expert - Mollie, iDEAL, Dutch compliance"
    keywords: ["mollie", "ideal", "payment", "invoice", "btw", "billing", "subscription"]
    patterns_file: "PAYMENT_PATTERNS.md"
    tools:
      - "Context7 MCP"
      - "Firecrawl MCP"
      - "Playwright MCP"
    responsibilities:
      - "Mollie payment integration patterns"
      - "iDEAL payment flow optimization"
      - "Dutch BTW tax calculation and compliance"
      - "Subscription billing management"
      - "Invoice generation and tracking"
    dutch_compliance:
      - "BTW rates: 21% standard, 9% reduced"
      - "Dutch invoicing requirements"
      - "SEPA payment standards"
      - "Professional service billing regulations"
    success_metrics:
      - "100% payment success rate"
      - "Zero BTW calculation errors"
      - "Full Dutch tax compliance"

  testing-specialist-agent:
    role: "Testing Expert - Playwright MCP, browser automation, E2E"
    keywords: ["test", "validation", "e2e", "browser", "playwright", "automation"]
    patterns_file: "TESTING_PATTERNS.md"
    tools:
      - "Playwright MCP"
    responsibilities:
      - "Browser automation patterns for validation"
      - "E2E workflow testing strategies"
      - "Mobile device testing patterns"
      - "Performance testing automation"
      - "Accessibility testing validation"
    critical_rules:
      - "NEVER create test files - use Playwright MCP only"
      - "Browser automation patterns only"
      - "Real-time testing via MCP integration"
    success_metrics:
      - "100% critical path coverage"
      - "Zero manual testing requirements"
      - "Sub-30s test execution times"

  ai-instruction-agent:
    role: "AI Expert - GPT-5, Claude, prompt engineering, voice"
    keywords: ["gpt", "claude", "prompt", "ai", "chat", "voice", "personality", "instruction"]
    patterns_file: "AI_INSTRUCTION_AGENT.md"
    tools:
      - "Context7 MCP"
      - "Firecrawl MCP"
    responsibilities:
      - "AI personality design for plumber brand"
      - "Dutch language prompt optimization"
      - "Emergency vs routine interaction patterns"
      - "Voice-to-text processing for invoices"
      - "Multi-model AI coordination (GPT-5 + Claude)"
    dutch_ai_features:
      - "Dutch plumbing terminology training"
      - "Amsterdam cultural context integration"
      - "Emergency response prioritization"
      - "Professional communication tone"
    success_metrics:
      - "95%+ customer satisfaction with AI"
      - "80%+ emergency classification accuracy"
      - "Sub-2s AI response times"

activation_rules:
  keyword_matching:
    strategy: "fuzzy_match"
    threshold: 0.70  # Clear keyword match required
    context_window: 50  # words
    explicit_request: "always_activate"  # User can explicitly request specialists
  
  multi_specialist:
    enabled: true
    max_concurrent: 4
    priority_resolution: "by_keyword_count"
  
  pattern_freshness:
    check_interval: "24h"
    auto_update: true
    fallback_to_cached: true

# NEW: Conflict Resolution Configuration
conflict_resolution:
  when_specialists_disagree:
    action: "present_options_to_user"
    format: |
      ðŸ¤” **Specialist Conflict Detected**
      
      **Issue**: {conflict_description}
      
      **Options**:
      1. **{specialist_1}** recommends: {option_1}
         - Pros: {pros_1}
         - Cons: {cons_1}
      
      2. **{specialist_2}** recommends: {option_2}
         - Pros: {pros_2}
         - Cons: {cons_2}
      
      **Insight**: {why_conflict_exists}
      **Recommendation**: {suggested_approach}
      
      Which approach would you prefer?
  
  hierarchy_fallback:
    enabled: false  # Always present options, never auto-resolve
    note: "User always chooses when specialists conflict"

# NEW: Update Frequency Configuration  
update_frequency:
  trigger: "after_successful_implementation"
  include_failures: true
  failure_format: |
    ## Failed Implementation: {timestamp}
    ### Attempted: {feature_name}
    **What went wrong**: {failure_reason}
    **Pattern that failed**: {failed_pattern}
    **Lesson learned**: {learning}
    **Updated approach**: {new_pattern}

# NEW: Proactive Suggestion Configuration
proactive_suggestions:
  intensity: "high"  # Testing phase - high interference
  triggers:
    - "Implementation decision points"
    - "Performance optimization opportunities"
    - "Code quality improvements"
    - "Competitive advantage possibilities"
    - "Dutch market enhancement opportunities"
  
  format: |
    ðŸ’¡ **{specialist_name} Suggestion**
    
    **Opportunity**: {suggestion_title}
    **Current approach**: {current_state}
    **Better pattern**: {suggested_improvement}
    **Why better**: {benefits}
    **Effort required**: {complexity_estimate}
    **Competitive advantage**: {moat_impact}
  
  timing:
    during_implementation: true
    context_aware: true
    respect_flow: "suggest_between_major_steps"

# NEW: Emergency Speed Mode Configuration
emergency_mode:
  enabled: true
  trigger_keywords: ["urgent", "emergency", "quick", "fast", "asap", "deadline"]
  
  speed_optimizations:
    specialist_activation: "instant_top_2"  # Only activate 2 most relevant
    pattern_depth: "surface_level"  # Skip deep analysis
    suggestions: "critical_only"  # Only show critical suggestions
    validation: "basic_checks"  # Minimal validation
    
  trade_offs:
    - "Sacrifices some pattern depth for 3x speed"
    - "Fewer proactive suggestions"
    - "Basic validation only"
    - "Still maintains all 10 golden rules"
    
  performance_targets:
    specialist_prep: "<5 seconds"
    pattern_loading: "<3 seconds"
    total_prep: "<8 seconds"
    
  quality_assurance:
    - "All 10 rules still enforced"
    - "Critical patterns still included"
    - "Post-implementation learning still captured"
    
  user_notification: |
    âš¡ **Emergency Speed Mode Activated**
    
    - Specialist prep: {prep_time}s (vs normal {normal_time}s)
    - Pattern depth: Surface level
    - Suggestions: Critical only
    - Quality: All 10 rules still enforced
    
    Ready for rapid implementation!

context_integration:
  pattern_loading:
    - "Load specialist patterns before implementation"
    - "Merge patterns with current task context"
    - "Validate pattern compatibility with project"
  
  knowledge_synthesis:
    - "Combine patterns from multiple specialists"
    - "Resolve conflicts with project priorities"
    - "Generate unified implementation approach"
  
  feedback_loop:
    - "Track pattern usage success/failure"
    - "Update patterns based on real results"
    - "Share learnings across specialist agents"

output_coordination:
  template_selection:
    simple_tasks: "prp-simple.md"
    medium_tasks: "prp-medium.md"
    complex_tasks: "prp-complex.md"
  
  specialist_integration:
    - "Include relevant specialist patterns in output"
    - "Reference specialist recommendations"
    - "Provide specialist-specific validation steps"
  
  moat_building:
    - "Identify competitive advantages from implementation"
    - "Track data collection opportunities"
    - "Document Dutch market differentiation"