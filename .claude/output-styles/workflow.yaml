# OPTIMIZED WORKFLOW - Essential 5-Phase Process
version: "2.0.0"
automation_level: "full"

# PHASE 1: Analysis & Planning (5-15 min)
phase_1_analysis:
  auto_execute: true
  steps:
    1: "Load context files (area-aware)"
    2: "Activate specialists (70% threshold)"
    3: "Detect complexity (simple/medium/complex)"
    4: "Scan for legacy code to delete"
  output: "PRP analysis with specialist recommendations"

# PHASE 2: Clarifying Questions (10-20 min)
phase_2_planning:
  mandatory: true
  questions:
    scope: "What are exact boundaries and success criteria?"
    integration: "How does this connect to existing tRPC/database?"
    mobile: "Mobile experience requirements?"
    dutch: "BTW, terminology, Amsterdam considerations?"
    moats: "Data collection and competitive advantages?"
  output: "Clear implementation strategy"

# PHASE 3: Implementation (Variable)
phase_3_implementation:
  rule_enforcement: "strict_13_golden_rules"
  mcp_tools: ["Context7", "Supabase", "Firecrawl", "Playwright", "Clerk", "Semgrep"]
  patterns: "T3_only_no_vanilla_js"
  comments: "section_markers_and_jsdoc_only"
  components: "shared_in_components_folder"
  data: "real_api_or_loading_states_never_mock"
  git_checkpoints:
    - "Commit after component structure complete"
    - "Commit after API integration working"
    - "Commit before major refactoring attempts"
    - "Run Semgrep security scan before any commit (Rule #13)"
    - "Auto-push all commits to GitHub immediately"

# PHASE 4: Validation & GitHub Sync (15-30 min)
phase_4_validation:
  automation: "playwright_mcp"
  checks:
    - "Component renders without errors"
    - "Mobile responsiveness works"
    - "API calls function correctly"
    - "All 13 golden rules followed"
    - "Semgrep security scan passes (Rule #13)"
    - "Performance targets met (>90 Lighthouse)"
  github_integration:
    production_commit_trigger:
      - "All validation checks pass"
      - "Feature is production-ready"
      - "No critical errors or warnings"
    commit_process:
      1: "Detect correct working directory"
      2: "Stage all changes with git add -A"
      3: "Create descriptive commit with business impact"
      4: "Push to GitHub automatically"
      5: "Provide GitHub URL with commit hash"
    working_directory_detection:
      plumber_saas_features: "/c/Users/styry/plumber-saas"
      output_style_updates: "/c/Users/styry"
      documentation_changes: "auto-detect based on file paths"

# PHASE 5: Documentation & Updates (10-15 min)
phase_5_documentation:
  auto_update_workflow:
    1: "Scan current work area for ALL .md files"
    2: "Assign specialists by content analysis"
    3: "Execute parallel updates (max 3 concurrent)"
    4: "Update CLAUDE.md master context"
    5: "Generate PRP document"
  
  competitive_moats:
    track: "Data collection, Dutch advantages, learning velocity"
    format: "Timestamp + patterns + competitive impact"

# ERROR HANDLING - Fix-First Approach
error_handling:
  rule_violations: 
    action: "stop_and_fix_immediately"
    message: "‚ö†Ô∏è Golden Rule violation detected - stopping to fix"
    
  mcp_failures:
    strategy: "fix_first_then_fallback"
    steps:
      1: "identify_specific_mcp_error"
      2: "attempt_automatic_fix"
      3: "if_fix_fails_notify_user_with_fix_suggestion"
      4: "only_fallback_to_cache_if_truly_unfixable"
    
    common_fixes:
      connection_timeout:
        fix: "retry_with_exponential_backoff"
        attempts: 3
        message: "üîß MCP connection timeout - retrying..."
        
      rate_limit:
        fix: "wait_and_retry_with_delay"
        delay: "60s"
        message: "‚è±Ô∏è MCP rate limit hit - waiting 60s before retry"
        
      authentication_error:
        fix: "refresh_api_keys_and_retry"
        message: "üîë MCP auth error - refreshing credentials and retrying"
        
      service_unavailable:
        fix: "retry_after_delay"
        delay: "30s"
        attempts: 2
        message: "üîÑ MCP service unavailable - retrying in 30s"
        
      invalid_request:
        fix: "validate_request_format_and_retry"
        message: "üìù MCP request format error - fixing and retrying"
    
    fallback_conditions:
      - "all_retry_attempts_exhausted"
      - "service_permanently_down"
      - "authentication_permanently_invalid"
      - "user_chooses_to_proceed_without_mcp"
    
    fallback_behavior:
      action: "use_cached_patterns_with_notification"
      message: |
        ‚ö†Ô∏è **MCP Service Issue - Using Cached Patterns**
        
        Issue: {error_description}
        Attempted fixes: {fixes_tried}
        
        Proceeding with cached patterns for now.
        Recommend fixing MCP connection before next session.
        
        Continue with implementation? [Y/N]
  
  specialist_conflicts: "present_user_options_with_recommendations"
  context_overflow: "compress_older_content_automatically"
  performance_issues: "apply_emergency_optimizations"

# SUCCESS METRICS
success_metrics:
  implementation_quality: "zero_rule_violations"
  dutch_market_features: "included_where_relevant"
  competitive_advantage: "moats_identified_and_built"
  development_velocity: "reusable_patterns_created"