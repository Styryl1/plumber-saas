# During Implementation Validation Checks for Plumber SaaS PRP
version: "2.0.0"
enforcement: "continuous"

# Real-time Rule Compliance Monitoring
rule_monitoring:
  rule_1_no_mock_data:
    description: "Monitor for mock data usage during implementation"
    
    trigger_patterns:
      - "const mockData = "
      - "const fakeData = "
      - "const dummyData = "
      - "// TODO: replace with real API"
      - "|| fallbackData"
      - "|| mockResponse"
    
    validation_checks:
      - name: "API call verification"
        check: "All data comes from tRPC calls or proper loading states"
        error_message: "Mock data detected - use real API or loading state"
      
      - name: "Error handling presence"
        check: "API calls have proper error handling"
        error_message: "Missing error handling for API call"
      
      - name: "Loading state implementation"
        check: "Loading states shown during data fetching"
        error_message: "Missing loading state for async operation"
    
    enforcement_action: "Stop and require real data implementation"
  
  rule_2_legacy_deletion:
    description: "Monitor for legacy code patterns being introduced"
    
    trigger_patterns:
      - "pages/_app.tsx"
      - "pages/api/"
      - "fetch('/api/"
      - "useEffect.*fetch"
      - "function.*Component"
      - "var "
      - "class Component"
    
    validation_checks:
      - name: "T3 pattern adherence"
        check: "Only App Router patterns used"
        error_message: "Legacy Pages Router pattern detected"
      
      - name: "API call method"
        check: "Only tRPC calls used for API communication"
        error_message: "Direct fetch() call detected - use tRPC"
      
      - name: "Component style"
        check: "Only functional components with hooks"
        error_message: "Legacy component pattern detected"
    
    enforcement_action: "Stop and require T3 pattern implementation"
  
  rule_3_smart_comments:
    description: "Monitor comment quality during implementation"
    
    acceptable_patterns:
      - "// === SECTION NAME ==="
      - "/**\n * @param"
      - "/**\n * @returns"
      - "// WHY: "
      - "// NOTE: "
      - "// TODO: "
    
    forbidden_patterns:
      - "// increment counter"
      - "// set state"
      - "// call API"
      - "// render component"
      - "// obvious comment"
    
    validation_checks:
      - name: "Comment usefulness"
        check: "Comments explain WHY, not WHAT"
        error_message: "Redundant comment detected - explain WHY not WHAT"
      
      - name: "JSDoc presence"
        check: "Exported functions have JSDoc comments"
        error_message: "Missing JSDoc for exported function"
      
      - name: "Section markers"
        check: "Major code sections have clear markers"
        error_message: "Consider adding section marker for clarity"
    
    enforcement_action: "Suggest comment improvement"
  
  rule_4_type_safety:
    description: "Monitor TypeScript type safety during implementation"
    
    forbidden_patterns:
      - ": any"
      - "as any"
      - "any[]"
      - "@ts-ignore"
      - "@ts-expect-error"
    
    required_patterns:
      - "api\\.[a-zA-Z]+\\.(useQuery|useMutation)"
      - "import.*from.*@prisma/client"
      - "z\\.(object|string|number|boolean)"
    
    validation_checks:
      - name: "No any types"
        check: "No 'any' types used anywhere"
        error_message: "TypeScript 'any' type detected - use proper types"
      
      - name: "tRPC usage"
        check: "All API calls use tRPC"
        error_message: "Non-tRPC API call detected"
      
      - name: "Zod validation"
        check: "Input validation uses Zod schemas"
        error_message: "Missing Zod validation for user input"
    
    enforcement_action: "Stop and require proper type implementation"
  
  rule_5_shared_components:
    description: "Monitor component reusability during implementation"
    
    duplication_patterns:
      - "const.*Button.*=.*function"
      - "const.*Modal.*=.*function"
      - "const.*Form.*=.*function"
      - "const.*Card.*=.*function"
    
    validation_checks:
      - name: "Component duplication check"
        check: "No duplicate component patterns"
        error_message: "Duplicate component detected - create shared component"
      
      - name: "Import path verification"
        check: "Components imported from ~/components"
        error_message: "Component not imported from shared location"
      
      - name: "shadcn/ui usage"
        check: "Base components use shadcn/ui"
        error_message: "Consider using shadcn/ui base component"
    
    enforcement_action: "Suggest shared component creation"
  
  rule_6_mcp_tools:
    description: "Monitor MCP tool usage during implementation"
    
    validation_checks:
      - name: "Documentation source"
        check: "Current documentation used via Context7 MCP"
        error_message: "Verify documentation is current via Context7 MCP"
      
      - name: "Database operations"
        check: "Database changes tested via Supabase MCP"
        error_message: "Test database operations with Supabase MCP"
      
      - name: "Example verification"
        check: "Implementation patterns verified via Firecrawl MCP"
        error_message: "Verify patterns with working examples via Firecrawl MCP"
    
    enforcement_action: "Suggest MCP tool verification"
  
  rule_7_t3_conventions:
    description: "Monitor T3 Stack convention adherence"
    
    required_patterns:
      - "~/app/"
      - "~/components/"
      - "~/server/"
      - "~/lib/"
      - "createTRPCRouter"
      - "protectedProcedure"
    
    validation_checks:
      - name: "File structure"
        check: "Files follow T3 directory structure"
        error_message: "File not in correct T3 directory structure"
      
      - name: "Import patterns"
        check: "Imports use T3 path aliases"
        error_message: "Use T3 path aliases (~/components, ~/server, etc.)"
      
      - name: "API patterns"
        check: "API routes use tRPC routers"
        error_message: "Use tRPC router instead of API route"
    
    enforcement_action: "Stop and require T3 pattern compliance"

# Quality Monitoring During Implementation
quality_monitoring:
  performance_tracking:
    description: "Monitor performance impact during development"
    
    checks:
      - name: "Bundle size monitoring"
        metric: "Component size impact"
        threshold: "50KB per component"
        action: "Suggest code splitting if exceeded"
      
      - name: "API response tracking"
        metric: "tRPC call performance"
        threshold: "100ms response time"
        action: "Suggest optimization if exceeded"
      
      - name: "Database query monitoring"
        metric: "Prisma query performance"
        threshold: "50ms query time"
        action: "Suggest indexing if exceeded"
    
    enforcement_action: "Flag performance concerns for optimization"
  
  accessibility_monitoring:
    description: "Monitor accessibility compliance during implementation"
    
    checks:
      - name: "Semantic HTML usage"
        check: "Proper HTML semantics used"
        patterns: ["<button>", "<input>", "<label>", "<h1>", "<nav>", "<main>"]
        error_message: "Use semantic HTML elements"
      
      - name: "ARIA attributes"
        check: "ARIA attributes present where needed"
        patterns: ["aria-label", "aria-describedby", "role"]
        error_message: "Add ARIA attributes for accessibility"
      
      - name: "Color contrast"
        check: "Color combinations meet WCAG standards"
        error_message: "Check color contrast for accessibility"
    
    enforcement_action: "Suggest accessibility improvements"
  
  security_monitoring:
    description: "Monitor security practices during implementation"
    
    checks:
      - name: "Input validation"
        check: "User inputs properly validated"
        patterns: ["z\\.object", "z\\.string", "z\\.number"]
        error_message: "Add Zod validation for user input"
      
      - name: "SQL injection prevention"
        check: "Database queries use parameterized inputs"
        patterns: ["ctx\\.db\\.", "prisma\\."]
        error_message: "Use Prisma ORM for safe database queries"
      
      - name: "Authentication checks"
        check: "Protected routes use authentication"
        patterns: ["protectedProcedure", "middleware"]
        error_message: "Add authentication to protected functionality"
    
    enforcement_action: "Stop and require security implementation"

# Dutch Market Feature Monitoring
dutch_market_monitoring:
  btw_compliance:
    description: "Monitor BTW implementation during development"
    
    checks:
      - name: "BTW rate usage"
        check: "Correct BTW rates applied"
        valid_rates: ["0.21", "0.09", "0.00"]
        error_message: "Use correct Dutch BTW rates (21%, 9%, 0%)"
      
      - name: "BTW display format"
        check: "BTW displayed in Dutch format"
        pattern: "€\\d+,\\d{2}"
        error_message: "Use Dutch currency formatting (€12,34)"
    
    enforcement_action: "Suggest BTW compliance fixes"
  
  terminology_monitoring:
    description: "Monitor Dutch terminology usage"
    
    checks:
      - name: "Professional terms"
        check: "Dutch plumbing terminology used"
        correct_terms:
          - "loodgieter" # not "plumber"
          - "lekkage" # not "leak"
          - "spoedgeval" # not "emergency"
          - "reparatie" # not "repair"
          - "installatie" # not "installation"
        error_message: "Use proper Dutch plumbing terminology"
    
    enforcement_action: "Suggest terminology corrections"
  
  payment_monitoring:
    description: "Monitor payment integration compliance"
    
    checks:
      - name: "iDEAL priority"
        check: "iDEAL presented as primary payment option"
        error_message: "Make iDEAL the primary payment option in Netherlands"
      
      - name: "Mollie integration"
        check: "Payment processing uses Mollie API"
        patterns: ["@mollie/api-client", "mollie"]
        error_message: "Use Mollie for Dutch payment processing"
    
    enforcement_action: "Suggest Dutch payment optimization"

# Competitive Advantage Monitoring
competitive_monitoring:
  data_collection:
    description: "Monitor data collection opportunities"
    
    checks:
      - name: "User interaction tracking"
        check: "User interactions logged for AI improvement"
        patterns: ["analytics", "tracking", "event"]
        suggestion: "Add user interaction tracking for AI learning"
      
      - name: "Error pattern logging"
        check: "Errors categorized for learning"
        patterns: ["errorLogger", "errorTracking"]
        suggestion: "Log error patterns for AI improvement"
    
    enforcement_action: "Suggest data collection enhancements"
  
  learning_velocity:
    description: "Monitor AI improvement opportunities"
    
    checks:
      - name: "Conversation logging"
        check: "AI conversations stored for training"
        suggestion: "Store AI conversations for model improvement"
      
      - name: "Customer feedback capture"
        check: "Customer feedback collected and analyzed"
        suggestion: "Add feedback collection for continuous improvement"
    
    enforcement_action: "Suggest learning velocity improvements"

# Real-time Validation Workflow
validation_workflow:
  continuous_monitoring:
    frequency: "On every code addition/change"
    scope: "All modified files and dependencies"
    reporting: "Real-time feedback with severity levels"
  
  checkpoint_validation:
    triggers:
      - "Component completion"
      - "API router completion"
      - "Page implementation completion"
      - "Feature completion"
    
    comprehensive_check: "All 10 rules + quality + Dutch market + competitive"
  
  intervention_levels:
    critical: "Stop implementation immediately"
    high: "Strong suggestion with explanation"
    medium: "Suggestion for improvement"
    low: "Note for future consideration"

# Monitoring Results Integration
results_integration:
  real_time_feedback:
    format: "Inline suggestions and warnings"
    detail: "Rule violated + specific fix + benefit explanation"
    
  checkpoint_reports:
    format: "Structured compliance report"
    content: "Rule adherence + quality metrics + suggestions"
    
  learning_capture:
    successful_patterns: "Record for future PRP generation"
    failure_patterns: "Update validation rules and suggestions"
    
# Validation Success Metrics
success_metrics:
  rule_compliance_rate: "Percentage of 10 rules followed continuously"
  quality_maintenance: "Performance and accessibility standards met"
  dutch_optimization: "Netherlands-specific features properly implemented"
  competitive_enhancement: "Competitive advantages identified and implemented"