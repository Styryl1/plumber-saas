# Pre-Implementation Validation Checks for Plumber SaaS PRP
version: "2.0.0"
enforcement: "mandatory"

# Context and Environment Validation
environment_checks:
  context_loading:
    description: "Verify all required context files are loaded"
    checks:
      - name: "Master context loaded"
        file: "C:/Users/styry/CLAUDE.md"
        required: true
        validation: "File contains current project status and architecture"
      
      - name: "Specialist patterns available"
        path: "C:/Users/styry/plumber-saas/context/specialists/"
        required: true
        validation: "At least one specialist pattern file accessible"
      
      - name: "Active PRPs loaded"
        path: "C:/Users/styry/plumber-saas/context/prp-active/"
        required: false
        validation: "Recent PRP patterns available for reference"
    
    failure_action: "Request manual context loading"
    
  specialist_activation:
    description: "Verify appropriate specialists are activated"
    checks:
      - name: "Keyword-based activation"
        validation: "At least one specialist activated based on task keywords"
        threshold: 0.7
      
      - name: "Specialist relevance"
        validation: "Activated specialists match task requirements"
        max_specialists: 4
      
      - name: "Pattern availability"
        validation: "All activated specialists have accessible pattern files"
    
    failure_action: "Request manual specialist selection"

  mcp_connectivity:
    description: "Verify MCP tools are functional"
    checks:
      - name: "Context7 MCP"
        tool: "context7"
        validation: "Can fetch latest documentation"
        required_for: ["ui", "t3", "database", "auth", "payment"]
      
      - name: "Supabase MCP"
        tool: "supabase"
        validation: "Can connect to database"
        required_for: ["database", "auth", "realtime"]
      
      - name: "Firecrawl MCP"
        tool: "firecrawl"
        validation: "Can scrape external examples"
        required_for: ["ui", "ux", "competitive"]
      
      - name: "Playwright MCP"
        tool: "playwright"
        validation: "Browser automation available"
        required_for: ["testing", "validation"]
    
    failure_action: "Use cached patterns with warning"

# Rule Compliance Pre-validation
rule_compliance:
  rule_1_no_mock_data:
    description: "Verify no mock data will be used"
    checks:
      - name: "API availability"
        validation: "Real API endpoints identified or will be created"
      
      - name: "Data source clarity"
        validation: "Clear plan for real data or proper loading states"
      
      - name: "Error handling plan"
        validation: "Strategy for handling API errors defined"
    
    failure_action: "Clarify data source strategy"
  
  rule_2_legacy_deletion:
    description: "Identify legacy code that needs deletion"
    checks:
      - name: "Legacy pattern detection"
        patterns:
          - "Vanilla JS in T3 project"
          - "Pages Router instead of App Router"
          - "Mock data implementations"
          - "Duplicate components"
          - "Non-tRPC API calls"
      
      - name: "User confirmation required"
        validation: "User must confirm deletion of identified legacy code"
    
    failure_action: "Request user confirmation for deletions"
  
  rule_4_type_safety:
    description: "Ensure type safety approach is clear"
    checks:
      - name: "tRPC usage plan"
        validation: "All API calls will use tRPC"
      
      - name: "Prisma integration"
        validation: "Database types will use Prisma generated types"
      
      - name: "TypeScript compliance"
        validation: "No 'any' types planned in implementation"
    
    failure_action: "Clarify type safety strategy"
  
  rule_5_shared_components:
    description: "Plan for component reusability"
    checks:
      - name: "Component reuse analysis"
        validation: "Existing components checked for reusability"
      
      - name: "New component strategy"
        validation: "New components designed for maximum reusability"
      
      - name: "Import path planning"
        validation: "Components will be imported from ~/components"
    
    failure_action: "Define component reuse strategy"

# Technical Architecture Validation
architecture_checks:
  t3_stack_compliance:
    description: "Verify T3 Stack patterns will be followed"
    checks:
      - name: "Next.js 14 App Router"
        validation: "Implementation will use App Router exclusively"
      
      - name: "tRPC integration"
        validation: "API layer will use tRPC routers"
      
      - name: "Prisma ORM usage"
        validation: "Database operations will use Prisma"
      
      - name: "TypeScript strict mode"
        validation: "All code will be written in TypeScript"
    
    failure_action: "Clarify T3 Stack adherence"
  
  database_architecture:
    description: "Verify database design follows multi-tenant patterns"
    checks:
      - name: "RLS policy planning"
        validation: "Row Level Security policies planned for data isolation"
      
      - name: "Multi-tenant schema"
        validation: "Database schema supports organization isolation"
      
      - name: "Performance considerations"
        validation: "Query performance optimization planned"
    
    failure_action: "Define database architecture strategy"
  
  security_architecture:
    description: "Verify security measures are planned"
    checks:
      - name: "Authentication strategy"
        validation: "Clerk authentication integration planned"
      
      - name: "Authorization planning"
        validation: "Permission system design defined"
      
      - name: "Data protection"
        validation: "GDPR compliance measures planned"
    
    failure_action: "Define security implementation strategy"

# Dutch Market Validation
dutch_market_checks:
  localization_planning:
    description: "Verify Dutch market features are considered"
    checks:
      - name: "BTW requirements"
        validation: "BTW calculation needs assessed"
        rates: ["21% standard", "9% reduced", "0% exempt"]
      
      - name: "Dutch terminology"
        validation: "Proper Dutch plumbing terms identified"
        terms: ["loodgieter", "lekkage", "spoedgeval", "reparatie", "installatie"]
      
      - name: "Amsterdam focus"
        validation: "Amsterdam-specific features considered"
      
      - name: "iDEAL integration"
        validation: "Payment integration requirements assessed"
    
    failure_action: "Define Dutch market feature requirements"
  
  competitive_advantage:
    description: "Verify competitive moat building opportunities identified"
    checks:
      - name: "Data collection opportunities"
        validation: "User interaction data collection planned"
      
      - name: "Learning velocity enhancement"
        validation: "AI improvement opportunities identified"
      
      - name: "Network effect potential"
        validation: "Platform benefit opportunities assessed"
      
      - name: "Local market differentiation"
        validation: "Netherlands-specific advantages planned"
    
    failure_action: "Identify competitive advantage opportunities"

# Quality and Performance Validation
quality_checks:
  performance_planning:
    description: "Verify performance considerations are addressed"
    checks:
      - name: "Mobile performance targets"
        validation: "Lighthouse score >90 target set"
      
      - name: "Bundle size considerations"
        validation: "Code splitting and lazy loading planned"
      
      - name: "API performance"
        validation: "Response time targets defined (<100ms)"
      
      - name: "Database performance"
        validation: "Query optimization strategy planned"
    
    failure_action: "Define performance optimization strategy"
  
  accessibility_planning:
    description: "Verify accessibility requirements are considered"
    checks:
      - name: "WCAG 2.1 AA compliance"
        validation: "Accessibility standards planned"
      
      - name: "Screen reader compatibility"
        validation: "Screen reader support planned"
      
      - name: "Keyboard navigation"
        validation: "Keyboard accessibility planned"
      
      - name: "Color contrast"
        validation: "Color accessibility considered"
    
    failure_action: "Define accessibility implementation strategy"

# Implementation Readiness
readiness_checks:
  development_environment:
    description: "Verify development environment is ready"
    checks:
      - name: "T3 project setup"
        validation: "plumber-saas T3 project is accessible"
        path: "C:/Users/styry/plumber-saas/"
      
      - name: "Dependencies available"
        validation: "Required npm packages installed"
        packages: ["@trpc/server", "@prisma/client", "@clerk/nextjs", "schedule-x"]
      
      - name: "Database connectivity"
        validation: "Supabase connection configured"
      
      - name: "Development server"
        validation: "Next.js development server can be started"
    
    failure_action: "Set up development environment"
  
  task_clarity:
    description: "Verify task requirements are clear"
    checks:
      - name: "Success criteria defined"
        validation: "Clear acceptance criteria established"
      
      - name: "Scope boundaries"
        validation: "Task boundaries clearly defined"
      
      - name: "Integration points"
        validation: "System integration requirements clear"
      
      - name: "Timeline expectations"
        validation: "Development timeline realistic"
    
    failure_action: "Clarify task requirements"

# Validation workflow
validation_workflow:
  sequence:
    1: "Environment and context validation"
    2: "Rule compliance pre-validation"
    3: "Technical architecture validation"
    4: "Dutch market validation"
    5: "Quality and performance validation"
    6: "Implementation readiness validation"
  
  failure_handling:
    critical_failures: "Stop implementation until resolved"
    warning_failures: "Proceed with caution and monitoring"
    minor_failures: "Log for post-implementation review"
  
  success_criteria:
    minimum: "All critical checks pass"
    optimal: "All checks pass with no warnings"
    
# Validation reporting
reporting:
  format: "Structured checklist with status indicators"
  detail_level: "Summary with detailed failure explanations"
  action_items: "Clear next steps for failed validations"
  
  output_template: |
    ## ✅ Pre-Implementation Validation
    
    ### Environment Status: {environment_status}
    - Context Loading: {context_status}
    - Specialist Activation: {specialist_status}
    - MCP Connectivity: {mcp_status}
    
    ### Rule Compliance: {rule_compliance_status}
    - No Mock Data: {rule1_status}
    - Legacy Deletion: {rule2_status}
    - Type Safety: {rule4_status}
    - Shared Components: {rule5_status}
    
    ### Architecture Readiness: {architecture_status}
    - T3 Stack Compliance: {t3_status}
    - Database Architecture: {database_status}
    - Security Architecture: {security_status}
    
    ### Dutch Market Readiness: {dutch_market_status}
    - Localization Planning: {localization_status}
    - Competitive Advantage: {competitive_status}
    
    ### Quality Planning: {quality_status}
    - Performance Planning: {performance_status}
    - Accessibility Planning: {accessibility_status}
    
    ### Implementation Readiness: {readiness_status}
    - Development Environment: {dev_env_status}
    - Task Clarity: {task_clarity_status}
    
    **Overall Status**: {overall_status}
    **Action Items**: {action_items}
    **Ready to Proceed**: {ready_status}